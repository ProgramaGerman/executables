#!/usr/bin/env python3
"""
Script de compilaci√≥n para el Conversor de Audio Universal
Crea un ejecutable usando PyInstaller
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def install_pyinstaller():
    """Instalar PyInstaller si no est√° disponible"""
    try:
        import PyInstaller
        print("‚úÖ PyInstaller ya est√° instalado")
        return True
    except ImportError:
        print("üì¶ Instalando PyInstaller...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
            print("‚úÖ PyInstaller instalado correctamente")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Error instalando PyInstaller: {e}")
            return False

def clean_build_directories():
    """Limpiar directorios de compilaci√≥n anteriores"""
    directories_to_clean = ['build', 'dist', '__pycache__']
    
    for directory in directories_to_clean:
        if os.path.exists(directory):
            print(f"üßπ Limpiando directorio: {directory}")
            shutil.rmtree(directory)
    
    # Limpiar archivos .spec antiguos (excepto el nuestro)
    for spec_file in Path('.').glob('*.spec'):
        if spec_file.name != 'ConversorAudioUniversal.spec':
            print(f"üßπ Eliminando archivo spec: {spec_file}")
            spec_file.unlink()

def create_executable():
    """Crear el ejecutable usando PyInstaller"""
    print("üî® Compilando aplicaci√≥n...")
    
    # Usar archivo .spec personalizado
    spec_file = "ConversorAudioUniversal.spec"
    
    # Comando de PyInstaller usando archivo .spec
    pyinstaller_cmd = [
        "pyinstaller",
        "--clean",                      # Limpiar cache
        spec_file
    ]
    
    try:
        # Ejecutar PyInstaller
        result = subprocess.run(pyinstaller_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Compilaci√≥n exitosa!")
            
            # Verificar que el ejecutable se cre√≥
            exe_path = os.path.join("dist", "ConversorAudioUniversal.exe")
            if os.path.exists(exe_path):
                file_size = os.path.getsize(exe_path) / (1024 * 1024)  # MB
                print(f"üìÅ Ejecutable creado: {exe_path}")
                print(f"üìä Tama√±o: {file_size:.1f} MB")
                return True
            else:
                print("‚ùå El ejecutable no se encontr√≥ en la carpeta dist/")
                return False
        else:
            print("‚ùå Error durante la compilaci√≥n:")
            print(result.stderr)
            if result.stdout:
                print("Salida est√°ndar:")
                print(result.stdout)
            return False
            
    except FileNotFoundError:
        print("‚ùå PyInstaller no encontrado. Aseg√∫rate de que est√© instalado.")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado durante la compilaci√≥n: {e}")
        return False

def copy_additional_files():
    """Copiar archivos adicionales al directorio de distribuci√≥n"""
    print("üìã Copiando archivos adicionales...")
    
    files_to_copy = [
        "README_MODULAR.md",
        "requirements.txt"
    ]
    
    dist_dir = "dist"
    if not os.path.exists(dist_dir):
        os.makedirs(dist_dir)
    
    for file_name in files_to_copy:
        if os.path.exists(file_name):
            shutil.copy2(file_name, dist_dir)
            print(f"   ‚úÖ Copiado: {file_name}")
        else:
            print(f"   ‚ö†Ô∏è  No encontrado: {file_name}")

def create_installer_info():
    """Crear archivo de informaci√≥n del instalador"""
    info_content = """
# Conversor de Audio Universal - Ejecutable

## üöÄ Ejecuci√≥n

Simplemente ejecuta `ConversorAudioUniversal.exe` para iniciar la aplicaci√≥n.

## üìã Caracter√≠sticas

- Ejecutable independiente (no requiere Python instalado)
- Incluye todas las dependencias necesarias
- FFmpeg se descarga autom√°ticamente si es necesario
- Interfaz gr√°fica moderna con tema oscuro

## üîß Soluci√≥n de Problemas

### El antivirus bloquea el ejecutable
- Esto es normal para ejecutables creados con PyInstaller
- Agrega una excepci√≥n en tu antivirus
- El archivo es seguro, puedes verificar el c√≥digo fuente

### Error al iniciar
- Ejecuta como administrador si es necesario
- Verifica que tengas permisos de escritura en la carpeta
- Revisa que no haya otro antivirus bloqueando la ejecuci√≥n

## üìÅ Archivos Incluidos

- `ConversorAudioUniversal.exe` - Aplicaci√≥n principal
- `README_MODULAR.md` - Documentaci√≥n completa
- `requirements.txt` - Lista de dependencias (referencia)

---

**¬°Disfruta convirtiendo tus archivos de audio! üéµ**
"""
    
    with open("dist/LEEME.txt", "w", encoding="utf-8") as f:
        f.write(info_content)
    
    print("‚úÖ Archivo de informaci√≥n creado: dist/LEEME.txt")

def main():
    """Funci√≥n principal de compilaci√≥n"""
    print("üéµ Compilador del Conversor de Audio Universal")
    print("=" * 50)
    
    # Verificar que estamos en el directorio correcto
    if not os.path.exists("audio_converter_gui_modular.py"):
        print("‚ùå Error: No se encontr√≥ el archivo principal.")
        print("   Aseg√∫rate de ejecutar este script desde el directorio del proyecto.")
        return False
    
    # Verificar que existe el icono
    if not os.path.exists("icons/musica.ico"):
        print("‚ùå Error: No se encontr√≥ el icono en icons/musica.ico")
        return False
    
    # Instalar PyInstaller
    if not install_pyinstaller():
        return False
    
    # Limpiar directorios anteriores
    clean_build_directories()
    
    # Crear ejecutable
    if not create_executable():
        return False
    
    # Copiar archivos adicionales
    copy_additional_files()
    
    # Crear informaci√≥n del instalador
    create_installer_info()
    
    print("\n" + "=" * 50)
    print("üéâ ¬°Compilaci√≥n completada exitosamente!")
    print("=" * 50)
    print("üìÅ El ejecutable est√° en: dist/ConversorAudioUniversal.exe")
    print("üìã Archivos adicionales copiados a la carpeta dist/")
    print("üöÄ Puedes distribuir toda la carpeta dist/ o solo el .exe")
    print("=" * 50)
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if not success:
            input("\nPresiona Enter para salir...")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚ùå Compilaci√≥n cancelada por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        input("\nPresiona Enter para salir...")
        sys.exit(1)